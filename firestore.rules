/**
 * @file Firestore Security Rules for SunoBot Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model, ensuring that each user can only access their own profile and settings data.
 * @data_structure All data is nested under /users/{userId}, with 'profile' and 'settings' subcollections.
 * @key_security_decisions
 *   - User listing is disallowed.
 *   - All write operations are protected by owner validation.
 *   - Data validation is relaxed in this prototype phase, focusing on authorization.
 *   - Path-based ownership avoids costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}/profile
     * @allow (create) - Authenticated user with UID 'user123' can create their profile at /users/user123/profile.
     * @allow (get, update, delete) - Authenticated user with UID 'user123' can read, update, and delete their profile at /users/user123/profile.
     * @deny (create) - Authenticated user with UID 'user456' cannot create a profile at /users/user123/profile.
     * @deny (get, update, delete) - Authenticated user with UID 'user456' cannot read, update, or delete the profile at /users/user123/profile.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/profile {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for user settings. Only the authenticated user can read and write their own settings.
     * @path /users/{userId}/settings
     * @allow (create) - Authenticated user with UID 'user123' can create their settings at /users/user123/settings.
     * @allow (get, update, delete) - Authenticated user with UID 'user123' can read, update, and delete their settings at /users/user123/settings.
     * @deny (create) - Authenticated user with UID 'user456' cannot create settings at /users/user123/settings.
     * @deny (get, update, delete) - Authenticated user with UID 'user456' cannot read, update, or delete the settings at /users/user123/settings.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/settings {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}