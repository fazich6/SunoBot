/**
 * @fileoverview Firestore Security Rules for SunoBot application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only
 * access their own user profile and settings data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /settings/{userId}: Stores user-specific settings.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own documents
 *   in the `/users/{userId}` and `/settings/{userId}` collections.
 * - Listing of documents in `/users` and `/settings` collections is disallowed
 *   to prevent unauthorized access to user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @allow (get) User with UID 'user_abc' can read their profile at /users/user_abc.
     * @deny (get) User with UID 'user_xyz' cannot read the profile at /users/user_abc.
     * @allow (update) User with UID 'user_abc' can update their profile at /users/user_abc.
     * @deny (update) User with UID 'user_xyz' cannot update the profile at /users/user_abc.
     * @allow (delete) User with UID 'user_abc' can delete their profile at /users/user_abc.
     * @deny (delete) User with UID 'user_xyz' cannot delete the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for user settings.
     * @path /settings/{userId}
     * @allow (create) User with UID 'user_abc' can create their settings at /settings/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create settings at /settings/user_abc.
     * @allow (get) User with UID 'user_abc' can read their settings at /settings/user_abc.
     * @deny (get) User with UID 'user_xyz' cannot read the settings at /settings/user_abc.
     * @allow (update) User with UID 'user_abc' can update their settings at /settings/user_abc.
     * @deny (update) User with UID 'user_xyz' cannot update the settings at /settings/user_abc.
     * @allow (delete) User with UID 'user_abc' can delete their settings at /settings/user_abc.
     * @deny (delete) User with UID 'user_xyz' cannot delete the settings at /settings/user_abc.
     * @principle Enforces document ownership for all operations on user settings.
     */
    match /settings/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}