/**
 * @file SunoBot Firestore Security Rules
 * @core Philosophy This ruleset enforces a strict user-ownership model. Each user can only access their own data,
 *  including profile information, settings, reminders, and chat history.
 * @data Structure:
 *  - /users/{userId}: User profiles, accessible only by the user.
 *  - /settings/{userId}: User settings, accessible only by the user.
 *  - /users/{userId}/reminders/{reminderId}: User's medicine reminders, accessible only by the user.
 *  - /users/{userId}/chatHistory/{messageId}: User's chat history, accessible only by the user.
 * @key Security Decisions:
 *  - User listing is disallowed to protect privacy.
 *  - All data is private to the user, with no public collections.
 *  - Write access is strictly controlled through the `isOwner()` function, which verifies that the authenticated user's ID matches the document's user ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Manages access to user profile information.
     * @path: /users/{userId}
     * @allow: User with UID 'user123' (create, update, delete)
     * @deny: User with UID 'otherUser' attempting to access 'user123' profile (create, update, delete)
     * @principle: Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Verify user is signed in
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      // Only allow the user to create their own profile, checking that the ID matches
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email is string;
      // Only allow the owner to update, and don't let them change ownership
      allow update: if isSignedIn() && isOwner(userId) && resource.data.email == request.resource.data.email;
      // Only the owner can delete
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description: Manages access to user-specific settings.
     * @path: /settings/{userId}
     * @allow: User with UID 'user123' (create, update, delete)
     * @deny: User with UID 'otherUser' attempting to access 'user123' settings (create, update, delete)
     * @principle: Enforces document ownership for writes.
     */
    match /settings/{userId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;

        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description: Manages access to individual medicine reminders for a user.
     * @path: /users/{userId}/reminders/{reminderId}
     * @allow: User with UID 'user123' (create, update, delete)
     * @deny: User with UID 'otherUser' attempting to access 'user123' reminders (create, update, delete)
     * @principle: Enforces document ownership for writes.
     */
    match /users/{userId}/reminders/{reminderId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description: Manages access to individual chat messages for a user.
     * @path: /users/{userId}/chatHistory/{messageId}
     * @allow: User with UID 'user123' (create, update, delete)
     * @deny: User with UID 'otherUser' attempting to access 'user123' chat history (create, update, delete)
     * @principle: Enforces document ownership for writes.
     */
    match /users/{userId}/chatHistory/{messageId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}