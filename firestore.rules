/**
 * @file Firestore Security Rules for SunoBot Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model, ensuring that each user can only access their own data, including profile information, settings, reminders, and chat history.
 * @data_structure The data is organized hierarchically under the `/users/{userId}` path. All user-specific data (profile, settings, reminders, and chat history) is nested under the user's ID.
 * @key_security_decisions
 *   - Users can only access their own data.
 *   - Listing all users or settings is disallowed.
 *   - The rules are designed to prevent unauthorized data modification and deletion.
 *
 * @denormalization_for_authorization N/A - User ownership is enforced via path-based rules, without the need for denormalization.
 * @structural_segregation N/A - All data is private and stored under user-specific paths.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching {userId} can create their profile.
     * @allow (get, update, delete) - Authenticated user with matching {userId} can read, update, and delete their profile.
     * @deny (create) - Authenticated user attempting to create a profile with a mismatched {userId}.
     * @deny (get, update, delete) - Authenticated user attempting to read, update, or delete a profile with a mismatched {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
     * @description Enforces access control for user settings.
     * @path /settings/{userId}
     * @allow (create) - Authenticated user with matching {userId} can create their settings.
     * @allow (get, update, delete) - Authenticated user with matching {userId} can read, update, and delete their settings.
     * @deny (create) - Authenticated user attempting to create settings with a mismatched {userId}.
     * @deny (get, update, delete) - Authenticated user attempting to read, update, or delete settings with a mismatched {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /settings/{userId} {
       function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for user reminders.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) - Authenticated user with matching {userId} can create a reminder.
     * @allow (get, list, update, delete) - Authenticated user with matching {userId} can read, list, update, and delete their reminders.
     * @deny (create) - Authenticated user attempting to create a reminder with a mismatched {userId}.
     * @deny (get, list, update, delete) - Authenticated user attempting to read, list, update, or delete reminders with a mismatched {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/reminders/{reminderId} {
       function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for chat history messages.
     * @path /users/{userId}/chatHistory/{messageId}
     * @allow (create) - Authenticated user with matching {userId} can create a chat message.
     * @allow (get, list, update, delete) - Authenticated user with matching {userId} can read, list, update, and delete their chat messages.
     * @deny (create) - Authenticated user attempting to create a chat message with a mismatched {userId}.
     * @deny (get, list, update, delete) - Authenticated user attempting to read, list, update, or delete chat messages with a mismatched {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/chatHistory/{messageId} {
       function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}