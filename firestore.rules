rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'testUID' can create their profile with /users/testUID if request.auth.uid === 'testUID'.
     * @allow (get) User with UID 'testUID' can read their profile at /users/testUID.
     * @allow (update) User with UID 'testUID' can update their profile at /users/testUID.
     * @allow (delete) User with UID 'testUID' can delete their profile at /users/testUID.
     * @deny (create) User with UID 'otherUID' cannot create a profile at /users/testUID.
     * @deny (get) User with UID 'otherUID' cannot read the profile at /users/testUID.
     * @deny (update) User with UID 'otherUID' cannot update the profile at /users/testUID.
     * @deny (delete) User with UID 'otherUID' cannot delete the profile at /users/testUID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requested user ID matches the authenticated user ID
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user is the owner and the resource exists
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific settings.
     * @path /settings/{userId}
     * @allow (create) User with UID 'testUID' can create settings at /settings/testUID if request.auth.uid === 'testUID'.
     * @allow (get) User with UID 'testUID' can read their settings at /settings/testUID.
     * @allow (update) User with UID 'testUID' can update their settings at /settings/testUID.
     * @allow (delete) User with UID 'testUID' can delete their settings at /settings/testUID.
     * @deny (create) User with UID 'otherUID' cannot create settings at /settings/testUID.
     * @deny (get) User with UID 'otherUID' cannot read the settings at /settings/testUID.
     * @deny (update) User with UID 'otherUID' cannot update the settings at /settings/testUID.
     * @deny (delete) User with UID 'otherUID' cannot delete the settings at /settings/testUID.
     * @principle Enforces document ownership for all operations.
     */
    match /settings/{userId} {
      // Check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requested user ID matches the authenticated user ID
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user is the owner and the resource exists
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/settings/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}