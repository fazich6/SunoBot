/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model, where each user can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /settings/{userId}: User-specific settings.
 * - /users/{userId}/reminders/{reminderId}: Medicine reminders for a user.
 * - /users/{userId}/chatHistory/{messageId}: Chat messages for a user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile and settings.
 * - Users can only read and write their own reminders.
 * - Users can only read and write their own chat history.
 * - Listing of user documents is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create) User RXSN9aywJyQAlPJJmFiRZcgIk9J3 can create their own profile document.
     * @allow (get) User RXSN9aywJyQAlPJJmFiRZcgIk9J3 can read their own profile document.
     * @allow (update) User RXSN9aywJyQAlPJJmFiRZcgIk9J3 can update their own profile document.
     * @deny (create) User WXSGyaywJyQAlPJJmFiRZcgIk9J3 cannot create profile document for RXSN9aywJyQAlPJJmFiRZcgIk9J3.
     * @deny (get) User WXSGyaywJyQAlPJJmFiRZcgIk9J3 cannot read profile document for RXSN9aywJyQAlPJJmFiRZcgIk9J3.
     * @deny (update) User WXSGyaywJyQAlPJJmFiRZcgIk9J3 cannot update profile document for RXSN9aywJyQAlPJJmFiRZcgIk9J3.
     * @deny (list) No listing of user documents is allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure user settings, allowing only the owner to read and write.
     * @path /settings/{userId}
     * @allow (create) User RXSN9aywJyQAlPJJmFiRZcgIk9J3 can create their own settings document.
     * @allow (get) User RXSN9aywJyQAlPJJmFiRZcgIk9J3 can read their own settings document.
     * @allow (update) User RXSN9aywJyQAlPJJmFiRZcgIk9J3 can update their own settings document.
     * @deny (create) User WXSGyaywJyQAlPJJmFiRZcgIk9J3 cannot create settings document for RXSN9aywJyQAlPJJmFiRZcgIk9J3.
     * @deny (get) User WXSGyaywJyQAlPJJmFiRZcgIk9J3 cannot read settings document for RXSN9aywJyQAlPJJmFiRZcgIk9J3.
     * @deny (update) User WXSGyaywJyQAlPJJmFiRZcgIk9J3 cannot update settings document for RXSN9aywJyQAlPJJmFiRZcgIk9J3.
     * @deny (list) No listing of user settings documents is allowed.
     * @principle Enforces document ownership for writes.
     */
    match /settings/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure medicine reminders, allowing only the owner to read and write.
     * @path /users/{userId}/reminders/{reminderId}
     * @allow (create) User RXSN9aywJyQAlPJJmFiRZcgIk9J3 can create their own reminder document.
     * @allow (get) User RXSN9aywJyQAlPJJmFiRZcgIk9J3 can read their own reminder document.
     * @allow (update) User RXSN9aywJyQAlPJJmFiRZcgIk9J3 can update their own reminder document.
     * @allow (list) User RXSN9aywJyQAlPJJmFiRZcgIk9J3 can list their own reminder documents.
     * @deny (create) User WXSGyaywJyQAlPJJmFiRZcgIk9J3 cannot create reminder document for RXSN9aywJyQAlPJJmFiRZcgIk9J3.
     * @deny (get) User WXSGyaywJyQAlPJJmFiRZcgIk9J3 cannot read reminder document for RXSN9aywJyQAlPJJmFiRZcgIk9J3.
     * @deny (update) User WXSGyaywJyQAlPJJmFiRZcgIk9J3 cannot update reminder document for RXSN9aywJyQAlPJJmFiRZcgIk9J3.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/reminders/{reminderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure chat history messages, allowing only the owner to read and write.
     * @path /users/{userId}/chatHistory/{messageId}
     * @allow (create) User RXSN9aywJyQAlPJJmFiRZcgIk9J3 can create their own chat message document.
     * @allow (get) User RXSN9aywJyQAlPJJmFiRZcgIk9J3 can read their own chat message document.
     * @allow (update) User RXSN9aywJyQAlPJJmFiRZcgIk9J3 can update their own chat message document.
     * @allow (list) User RXSN9aywJyQAlPJJmFiRZcgIk9J3 can list their own chat message documents.
     * @deny (create) User WXSGyaywJyQAlPJJmFiRZcgIk9J3 cannot create chat message document for RXSN9aywJyQAlPJJmFiRZcgIk9J3.
     * @deny (get) User WXSGyaywJyQAlPJJmFiRZcgIk9J3 cannot read chat message document for RXSN9aywJyQAlPJJmFiRZcgIk9J3.
     * @deny (update) User WXSGyaywJyQAlPJJmFiRZcgIk9J3 cannot update chat message document for RXSN9aywJyQAlPJJmFiRZcgIk9J3.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/chatHistory/{messageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}